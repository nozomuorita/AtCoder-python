初めに、マス(i, j)から距離ルートmだけ移動するために必要なxの増分dxとyの増分dyのペア(dx、dy)を列挙する
すなわち、

(dx**2 + dy**2) ** 0.5 = m ** 0.5

となるdx, dyの組を列挙する。
このとき探す範囲は、[-m**0.5, m**0.5]でよい。
仮に、dx > m**0.5とすると、(dx**2 + dy**2)はm**0.5を超えてしまうため、上記の範囲を調べれば十分

ゆえに、
route_m = int(m**0.5)+1
for i in range(-route_m, route_m):
    for j in range(-route_m, route_m):

として、(dx, dy)のペアを探す。

ペアを列挙したら、BFSを行い、最小移動回数を計算する。
初めに、答えの型となるansを定義する。

ans = [[-1]*n for _ in range(n)]
ans[0][0] = 0

n*nの2次元配列を作り、初期位置以外はすべて-1(到達不可能)とする。
初期位置(0, 0)は、0回の移動で到達できるため、0とする。

q = deque()
q.append((0, 0))

として、キューに初期位置を追加し、BFS

for dx, dy in dxdy:

として、事前計算したdx, dyだけ移動した場所が次のキュー追加対象となる。
このとき、dx, dyだけ移動した後の位置がn*nの範囲を超えていないこと、まだ訪問していない(-1である)ことを満たしている必要がある。
訪問済みである(-1でない)場合、最小移動回数が計算済みなので飛ばす

上記条件を満たすなら

ans[x+dx][y+dy] = ans[x][y] + 1

として、移動前の値+1とする(移動前の場所の移動回数+1がその場所の最小移動回数)
移動後の座標をキューに追加し、次の探索対象とする。

出力