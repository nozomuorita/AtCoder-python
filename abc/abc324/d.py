"""
・平方数で全探索(nで全探索すると最悪で10**14まで考慮する必要があり、同じ平方数も考えることになるため非効率&TLE)
・nの各桁をカウント(d1)
・考えられる最大値は10**14なので、10**14までの数をループで回し、0以外の各桁の数をカウント(0は別で数だけカウント)
・各ループにおいて、以下の処理を行う
・次の二つの条件を満たせばOK
・その平方数の各桁のカウント(d2)とnの各桁のカウント(d1)が等しい
・その平方数の0の数が、nの0の数以下である。
・その平方数の0の数がnの0の数より小さいなら、nの中の余分な0を先頭に持ってくる(000342のようにする)ことで、作ることができるため
・逆にnの0のほうが多い場合は、作ることができないのでダメ
"""
from collections import defaultdict
n = int(input())
s = input()
ans = 0

# nの各桁の数をカウント(0は別にzeroでカウント)
d1 = defaultdict(int)
zero = 0                                #  nの中の0の数をカウント
for i in s:
    if i=='0':
        zero += 1
    else:
        d1[i] += 1
    
# 考えられる最大値
# 入力はn桁なので、最大で(9*n)である(str)
mx = int('9'*n)

# 平方数を一つずつ見ていく
# 最大で10**14-1まで作れるので、ループは10**7までで大丈夫
for i in range(10**7):
    tmp = i**2                          #  平方数
    if tmp >mx: break                   #  n桁で作ることのできる最大の数を超えたらループを終了
    
    d2 = defaultdict(int)               #  平方数(tmp=i**2)の各桁の数をカウント
    tmp2 = str(tmp)
    zero2 = 0                           #  平方数の0の数をカウント
    for j in range(len(tmp2)):
        if tmp2[j]=='0':
            zero2 += 1
        else:
            d2[tmp2[j]] += 1
    
    # 0以外の各数字の数が等しく、0の数についてはnのほうが多いならOK
    if d1==d2 and zero>=zero2:
        ans += 1
        
print(ans)